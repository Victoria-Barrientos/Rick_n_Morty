{"ast":null,"code":"const regexEmail = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\nconst emailLength = /@\"^(?!.{35})([a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)$/;\nconst regexPassword = /^(?=.*?[a-z]).{8,16}$/;\nconst regexNumbers = /[0-9]/;\nconst validation = (property, value, errors, setErrors) => {\n  if (property === \"email\") {\n    if (!value) {\n      setErrors({\n        ...errors,\n        [property]: \"El email no puede estar vacío.\"\n      });\n    }\n    if (emailLength.test(value)) {\n      setErrors({\n        ...errors,\n        [property]: \"El email no puede tener mas de 35 caracteres.\"\n      });\n    }\n    if (!regexEmail.test(value)) {\n      setErrors({\n        ...errors,\n        [property]: \"El email debe tener formato Email.\"\n      });\n    } else {\n      setErrors({});\n    }\n  }\n  if (property === \"password\") {\n    if (!value) {\n      setErrors({\n        ...errors,\n        [property]: \"La contraseña no puede estar vacía.\"\n      });\n    }\n    if (!regexPassword.test(value)) {\n      setErrors({\n        ...errors,\n        [property]: \"La contraseña tiene que tener una longitud entre 8 y 16 caracteres.\"\n      });\n    }\n    // if(!regexNumbers.test(value)) {\n    //     setErrors({\n    //         ...errors,\n    //         [property]: \"La contraseña tiene que tener al menos un número.\"\n    //     })\n    // }\n    else {\n      setErrors({});\n    }\n  }\n};\nexport default validation;","map":{"version":3,"names":["regexEmail","emailLength","regexPassword","regexNumbers","validation","property","value","errors","setErrors","test"],"sources":["C:/Users/54934/Desktop/PROGRAMACION/HENRY/Proyecto_Integrador/rick_and_morty/src/validation.js"],"sourcesContent":["const regexEmail = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\nconst emailLength = /@\"^(?!.{35})([a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)$/\r\nconst regexPassword = /^(?=.*?[a-z]).{8,16}$/;\r\nconst regexNumbers = /[0-9]/\r\n\r\nconst validation = (property, value, errors, setErrors) => {\r\n    if (property === \"email\") {\r\n        if(!value) {\r\n            setErrors({\r\n                ...errors,\r\n                [property]: \"El email no puede estar vacío.\"\r\n            })\r\n        } \r\n        if(emailLength.test(value)) {\r\n            setErrors({\r\n                ...errors,\r\n                [property]: \"El email no puede tener mas de 35 caracteres.\"\r\n            })\r\n        }\r\n        if (!regexEmail.test(value)) {\r\n            setErrors({\r\n                ...errors,\r\n                [property]: \"El email debe tener formato Email.\"\r\n            })\r\n        } else {\r\n            setErrors({})\r\n        }\r\n    }\r\n    if (property === \"password\") {\r\n        if(!value) {\r\n            setErrors({\r\n                ...errors,\r\n                [property]: \"La contraseña no puede estar vacía.\"\r\n            })\r\n        } \r\n        if(!(regexPassword.test(value))) {\r\n            setErrors({\r\n                ...errors,\r\n                [property]: \"La contraseña tiene que tener una longitud entre 8 y 16 caracteres.\"\r\n            })\r\n        }\r\n        // if(!regexNumbers.test(value)) {\r\n        //     setErrors({\r\n        //         ...errors,\r\n        //         [property]: \"La contraseña tiene que tener al menos un número.\"\r\n        //     })\r\n        // }\r\n        else {\r\n            setErrors({})\r\n        }\r\n    }\r\n}\r\n\r\nexport default validation"],"mappings":"AAAA,MAAMA,UAAU,GAAG,uIAAuI;AAC1J,MAAMC,WAAW,GAAG,sJAAsJ;AAC1K,MAAMC,aAAa,GAAG,uBAAuB;AAC7C,MAAMC,YAAY,GAAG,OAAO;AAE5B,MAAMC,UAAU,GAAGA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAEC,SAAS,KAAK;EACvD,IAAIH,QAAQ,KAAK,OAAO,EAAE;IACtB,IAAG,CAACC,KAAK,EAAE;MACPE,SAAS,CAAC;QACN,GAAGD,MAAM;QACT,CAACF,QAAQ,GAAG;MAChB,CAAC,CAAC;IACN;IACA,IAAGJ,WAAW,CAACQ,IAAI,CAACH,KAAK,CAAC,EAAE;MACxBE,SAAS,CAAC;QACN,GAAGD,MAAM;QACT,CAACF,QAAQ,GAAG;MAChB,CAAC,CAAC;IACN;IACA,IAAI,CAACL,UAAU,CAACS,IAAI,CAACH,KAAK,CAAC,EAAE;MACzBE,SAAS,CAAC;QACN,GAAGD,MAAM;QACT,CAACF,QAAQ,GAAG;MAChB,CAAC,CAAC;IACN,CAAC,MAAM;MACHG,SAAS,CAAC,CAAC,CAAC,CAAC;IACjB;EACJ;EACA,IAAIH,QAAQ,KAAK,UAAU,EAAE;IACzB,IAAG,CAACC,KAAK,EAAE;MACPE,SAAS,CAAC;QACN,GAAGD,MAAM;QACT,CAACF,QAAQ,GAAG;MAChB,CAAC,CAAC;IACN;IACA,IAAG,CAAEH,aAAa,CAACO,IAAI,CAACH,KAAK,CAAE,EAAE;MAC7BE,SAAS,CAAC;QACN,GAAGD,MAAM;QACT,CAACF,QAAQ,GAAG;MAChB,CAAC,CAAC;IACN;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KACK;MACDG,SAAS,CAAC,CAAC,CAAC,CAAC;IACjB;EACJ;AACJ,CAAC;AAED,eAAeJ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}